总体目标
============

动机
------------
随着地球观测系统的不断发展和新模式的启动，为了利用数据的潜力，大量研究工作需要进行。随着时间的推移，数据量也在增加，需要越来越高效的数据同化。考虑到新观测系统的成本，这一进程必须迅速进行。新框架的目标之一是实现高效的研究工作，加快从研究到实时使用的过渡。

随着天气和环境预报的进展，它们也在向更全面地表示地球系统的方向发展。该框架必须满足地球系统的所有组成部分，从而能够向完全耦合的地球系统发展。

数据同化算法本身也在不断发展和发展，以更好地利用可用数据。该框架将包括现有的可操作 DA 算法，并有助于跨领域和应用程序探索新的 DA 科学。必须指出，统一的系统并不意味着对所有模式和场景实行单一配置，因为每个机构都可以在框架内使用或开发不同的应用程序。

运行数据同化系统的超级计算机正变得越来越复杂，总是有越来越多的可能是异构处理元素。高效使用它们是越来越关注的问题，大多数中心都在探索如何提高其预测模型和数据同化系统的可扩展性。该框架必须考虑可扩展性，并促进适应新架构。

对操作和研究用途的要求各不相同。一般来说，该系统必须灵活开发和研究，并且易于用户学习和测试。同时，它必须满足对稳健性、效率、编码标准和可维护性的运营要求。

目前，对通用的同化系统要求是多种多样的。然而，在过去十两年中，软件开发技术取得了显著进展，使得日常生活中复杂软件的使用成为日常操作。最近，通信技术也发展到了在全国范围内从事同一项目的水平，已成为软件行业的普遍做法。这些技术共同使设定的目标变得可行。

复杂系统的现代软件开发的关键概念是分离关注点。在精心设计的架构中，团队可以并行开发不同的方面，而不会干扰其他团队的工作，也不会破坏他们未处理的组件。科学家可以更有效地专注于自己的专业领域，而无需了解系统的各个方面。这类似于模块化的概念。但是，现代技术（例如面向对象的编程）扩展了这一概念，并且同样重要的是，在整个代码中自动统一地强制执行这一概念。

为了促进协作工作，现代软件开发工具一直并将继续使用。这些工具包括版本控制、错误和功能开发跟踪、自动回归测试以及交换此信息的实用程序。这对于跨机构开展工作至关重要，可能在全国不同地区开展工作，并将用于初始开发和长期演变和维护。

如果工具可用，第一项任务将是定义系统组件之间的接口。这些接口将是通用和抽象的。此任务将受益于其他类似项目的经验（例如 ECMWF 的 OOPS）。基于这些接口，将逐步开发与模型无关的高级应用程序。

一旦定义了高级抽象接口，现有代码将逐步适应新的接口。将对现有软件进行修改，称为重构部件，以防止发生分歧并维持系统的持续运行。将定义首先实现的接口子集，以便某些应用程序可以在一切完成之前开始使用新接口。

对于操作应用程序，必须确保这些原则的应用不会对其实施代码的能力产生不利影响或对效率产生负面影响。


系统代码的管理
-----------------

是否将代码纳入系统的决定取决于几个标准。当然，科学和技术质量是标准之一，但对系统的益处是另一个非常重要的标准。事实上，这是最重要的。在数据同化和预测系统的背景下，管理框架的首要作用是做出这些决策，明确界定内部项目主管、团队管理和社区监督的责任。

审查过程确定科学和技术质量在任何时候是否足够。不将某个方面纳入共同体守则的决定并不是对其科学卓越性的判断。对于一个用户来说至关重要的方面可能只对该用户有用。在这种情况下，代码应保存在单独的存储库中，构建系统有责任在不影响其他应用程序的情况下包含给定应用程序所需的内容。在这方面，现代软件开发架构对于在数据同化和预测系统中提供这种级别的功能是绝对必要的；以前的编程技术根本无法实现这一点。

在旧风格的 Fortran 中，将特定于用户的代码与社区代码分开意味着某些子程序调用会悬空，并且可能有些全局变量将处于未知状态。通过将随通用代码一起提供的虚拟例程解决了这个问题。不幸的是，这种方法无法扩展，很快变得无法管理。然后，解决方案是将所有内容都包含在共享代码中，这些代码很快就变得臃肿、难以管理和不受欢迎。

在现代编程中，这种情况可以避免。模块化、通用编程和分离问题等常见做法允许更多功能和高效的工作流程。一方面，继承结构中的专用子类在删除时不会留下任何痕迹。例如，在 DA 系统中使用特定的观测类型，或者在模型中使用特定的物理包；还有许多其他情况可能存在。另一方面，基于对象集合构建的高级应用程序对使用全部或部分相同对象的其他应用程序没有任何影响。软件包可能只有低级扩展（例如浏览器或支持插件的 Photoshop 等应用程序）或高级扩展（系统库或 MPI）或两者兼有。

但是，只有当中间层的接口稳定时，这才会起作用。如果基类的接口发生变化，则所有子类都需要调整。如果高级应用程序使用的对象的接口发生变化，所有这些应用程序都需要更改。如果经常发生这种情况，系统将很快变得不受欢迎。统一数据同化和预测系统治理框架的第二个作用是确保界面的变化不经常而且有充分理由。如果这种更改是合理的，那么就必须记录和传达这些变更。

管理框架的第三个作用是确定谁有权审查和管理每个级别的代码，最重要的是在发布准备级别。通常，这意味着为代码的每个主要组成部分指定一小批审阅者，并指定接受拉取请求的标准（例如批准拉取请求的最低数量的审阅者）。审核人员库的规模和批准数量应确保足够的审查，同时保持高效的流程。如上所述，应该信任审稿人根据具体情况添加其他审阅者或委派其角色，特别是对于小变化。

